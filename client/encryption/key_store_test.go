package encryption

import (
	"github.com/crossle/libsignal-protocol-go/serialize"
	"github.com/crossle/libsignal-protocol-go/util/keyhelper"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"signal-chat/client/database"
	"testing"
)

func TestKeyStore_StoreIdentityKeyPair(t *testing.T) {
	t.Run("persistently stores identity key pair", func(t *testing.T) {
		// Arrange
		db := database.NewFake()
		err := db.Open("me")
		require.NoError(t, err)
		serializer := serialize.NewJSONSerializer()
		store := NewKeyStore(db, serializer)
		identityPair, err := keyhelper.GenerateIdentityKeyPair()
		require.NoError(t, err)

		// Act
		err = store.StoreIdentityKeyPair(identityPair)

		// Assert
		assert.NoError(t, err)
		got := store.GetIdentityKeyPair()
		assert.NotSame(t, identityPair, got, "shouldn't be the same pointer that is returned from GetIdentityKeyPair")
		assert.Equal(t, identityPair, got)
	})
}

func TestKeyStore_StoreSignedPreKey(t *testing.T) {
	t.Run("persistently stores signed pre key", func(t *testing.T) {
		// Arrange
		db := database.NewFake()
		err := db.Open("me")
		require.NoError(t, err)
		serializer := serialize.NewJSONSerializer()
		store := NewKeyStore(db, serializer)
		identityPair, err := keyhelper.GenerateIdentityKeyPair()
		require.NoError(t, err)
		signedPreKeyID := uint32(123)
		signedPreKeyPair, err := keyhelper.GenerateSignedPreKey(identityPair, signedPreKeyID, serializer.SignedPreKeyRecord)
		require.NoError(t, err)

		// Act
		store.StoreSignedPreKey(signedPreKeyID, signedPreKeyPair)

		// Assert
		got := store.LoadSignedPreKey(signedPreKeyID)
		assert.NotSame(t, signedPreKeyPair, got, "shouldn't be the same pointer that is returned from LoadSignedPreKey")
		assert.Equal(t, signedPreKeyPair.ID(), got.ID())
		assert.Equal(t, signedPreKeyPair.Signature(), got.Signature())
		assert.Equal(t, signedPreKeyPair.KeyPair().PrivateKey(), got.KeyPair().PrivateKey())
		// TODO: SignedPreKey has a bug, NewSignedPreKeyFromStruct constructor that is used by Deserialize() method
		// generates invalid public key. Skip testing PublicKey for now. The public key generated by
		//NewSignedPreKeyFromStruct keeps the DjbType prefix byte but strips the last byte from the public key that
		//was serialized. Instead if should strip the prefix and keep the last byte.
	})
}
